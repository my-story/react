{"version":3,"file":"static/webpack/static/development/pages/profile/dashboard.js.8c3140fa248680a0af97.hot-update.js","sources":["webpack:///./components/survivalKit/SurvivalKitProfile.js"],"sourcesContent":["import React,{ Component } from 'react';\nimport * as toastr from 'toastr';\nimport KitServices from '../../services/KitServices';\nimport ProductKit from './ProductKit';\nimport TechniqueKit from './TechniqueKit';\nimport TipKit from './TipKit';\n\nclass SurvivalKitProfile extends Component {\n\n    state = {\n        user: \"\",\n        kit: \"\",\n        tips: \"\"\n    };  \n    \n    // static getInitialProps({ query: { id } }) {\n    //     return { id };\n    // }\n\n    componentDidMount = () => {\n        this.setState({user:this.props.user});\n\n        KitServices.getKitProfile(this.props.kit)\n        .then((kit) => {\n            \n            this.setState({kit})\n        \n        })\n        .catch((err) => console.log(err))\n    };\n\n    getTipsList = () => {\n        const {user, kit} = this.state;\n\n        if (kit) {\n            if (user.tips.length > 0) {\n\t\t\t\t\t\t\n                kit.tips.map((tip , index) => { \n                    if (user.tips.includes(tip._id))\n                    {\n                        let tips = [...this.state.kit.tips];\n                        // 2. Make a shallow copy of the item you want to mutate\n                        let item = {...tips[index]};\n                        // 3. Replace the property you're intested in\n                        item.name = tip;\n                        // 4. Put it back into our array. N.B. we *are* mutating the array here, but that's why we made a copy first\n                        tips[index] = item;\n                        // 5. Set the state to our new copy\n                        this.setState({tips});\n                        // let joined = this.state.tips.concat(tip);\n                        // this.setState({\n                            \n                        //     // tips: update(this.state.tips, {index: {$set: tip}})\n                        // })\n                        // console.log(tip)\n                    } \n    \n                })\n            }\n        }\n\n    };\n\n    getTechniquesList = () => {\n        const {kit , user} = this.state;\n\n\t\t\t//    console.log(kit.tips.some(x => user.tips.includes(x._id)));\n            if (kit) {\n                if (user.techniques.length > 0) {\n\t\t\t\t\tkit.techniques.map((technique , index) => { \n\t\t\t\t\t\tif (user.techniques.includes(technique._id))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconsole.log(technique) \n\t\t\t\t\t\t} \n\t\t\t\t\t})\n\t\t\t\t}\n            }\n      };\n    getProductsList = () => {\n        const {kit, user} = this.state;\n\n        if (kit) {\n            if (user.products.length > 0) {\n                kit.products.map((product , index) => { \n                    if (user.products.includes(product._id))\n                    {\n                        console.log(product)\n                    } \n                })\n            }\n        }\n\n    };\n  \n\n    //Add three dots ... after a certain length of the string.\n    shrinkParagraph = (p) => {\n        // const {kit} = this.state;\n        const length = p.length;\n         if (length > 100){\n             return(\n                 <p>{p.substring(0,100)} ...</p>\n             )\n         } else {\n            return(\n                <p>{p}...</p>\n            )\n         }\n    };\n\n    render(){\n        const {kit} = this.state || {};\n        \n        console.log(this.state);\n\n        if (kit === undefined ) {\n            return(<div>...</div>)\n        } else {\n            return (\n                <div className=\"product-kit-page\">\n                    {this.getTechniquesList()}\n                    {this.getTipsList()}\n                    {this.getProductsList()}\n                \n                {/* {kit.products.map((p, index) => {\n                    let product = p.product;\n                    return(\n                    <ProductKit p={p} product={product} kit={kit} ></ProductKit>\n                    )\n                })} */}\n    \n                {/* //Techniques DESIGN FIGURE OUT How to dispaly all of them */}\n                {/* {kit.techniques.map((technique , index) => {\n                    return(\n                        <TechniqueKit technique={technique} kit={kit}></TechniqueKit>\n                    )\n                })\n                } */}\n\n                {/* TIPS MAP */}\n                {/* {kit.tips.map(( tip, index ) => {\n                    return(\n                        <div key={index}>\n                            <TipKit tip={tip} kit={kit} key={index}></TipKit>\n                        </div>\n                    )\n                })} */}\n\n                </div>\n            )    \n\n        }\n            }\n}\n\nexport default SurvivalKitProfile;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AACA;AAHA;AACA;AAHA;AAaA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAEA;AAEA;AACA;AAvBA;AAyBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAvDA;AAyDA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAvEA;AAwEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAtFA;AA0FA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AArGA;AACA;AAsGA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AACA;AAlJA;AACA;AAmJA;;;;A","sourceRoot":""}